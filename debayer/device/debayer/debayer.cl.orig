#define WIDTH 1280
#define HEIGHT 800
#define STRIDE WIDTH
#define WINDOW_SIZE 6

#define PO(image, x, y, W) ((image)[y*W+x])
#define P(image, x, y, W, H) ((image)[(y >= H ? H - 1 : y < 0 ? 0 : y) * W + (x >= W ? W - 1 : x < 0 ? 0 : x)])
#define PW(image, x, y) P(image, x, y, WIDTH, HEIGHT)

void debayer_bggr_to_u8xbpp_hqlinear(const uchar* in, uchar4* out, int x, int y, int outstride);
uchar clamp_i16_u8(int v);

kernel void debayer(global uchar* restrict in, global uchar4* restrict out, int outstride) {
	#define SHIFT_REG_SIZE WINDOW_SIZE*WIDTH
	uchar im_reg[SHIFT_REG_SIZE];
	
	#pragma unroll
	for (unsigned int i = 0; i < SHIFT_REG_SIZE; ++i) {
		im_reg[i] = 0;
	}
	
	int i = 0;
	int j = 0;
	uchar4 output[4];
	while (j <= HEIGHT + 3) {
		#pragma unroll
		for (unsigned int i_shift = 0; i_shift < SHIFT_REG_SIZE - 2; ++i_shift) {
			im_reg[i_shift] = im_reg[i_shift + 2];
		}
		im_reg[SHIFT_REG_SIZE-2] = P(in, i, j, WIDTH, HEIGHT);
		im_reg[SHIFT_REG_SIZE-1] = P(in, i+1, j, WIDTH, HEIGHT);
		if (i >=4 && j >= 4) {
			debayer_bggr_to_u8xbpp_hqlinear(im_reg, output, i-4, j-4, outstride);
					
			// output indices
			int dest_b  = (j-4)*STRIDE + (i-4)*4*3;
			out[dest_b] = output[0];
			out[dest_b+1] = output[1];
			out[dest_b+2] = output[2];
			out[dest_b+3] = output[3];
		}

		// increase i, j
		if (i > WIDTH + 1) {
			i = 0;
			j += 2;
		}
		else {
			i += 2;
		}
	}
}

uchar clamp_i16_u8(int v)
{
    if (v <   0) { return   (uchar)0; }
    if (v > 255) { return (uchar)255; }
    return (uchar)v;
}

void debayer_bggr_to_u8xbpp_hqlinear(const uchar* in, uchar4* const out, int x, int y, int outstride)
{

    int r, g, b;

    // Pixel naming pattern. Outputs are are all four RGB values in cell 5
    // |     |     | B2  | G21 |     |     |
    // |     | R1  | G22 | R2  | G32 |     |
    // |     |     |-----|-----|     |     |
    // | B4  | G41 | B5  | G51 | B6  | G61 |
    // | G42 | R4  | G52 | R5  | G62 | R6  |
    // |     |     |-----|-----|     |     |
    // |     | G71 | B8  | G81 | B9  |     |
    // |     |     | G82 | R8  |     |     |

	// (x,y) is location of B5

	// indices into nine 2x2 blocks
	uchar r1 = PW(in, x-1, y-1);
	uchar b2 = PW(in, x, y-2);
	uchar g21 = PW(in, x+1, y-2);
	uchar g22 = PW(in, x, y-1);;
	uchar r2 = PW(in, x+1, y-1);
	uchar g32 = PW(in, x+2, y-1);
	uchar b4 = PW(in, x-2, y);
	uchar g41 = PW(in, x-1, y);
	uchar b5 = PW(in, x, y);
	uchar g51 = PW(in, x+1, y);
	uchar b6 = PW(in, x+2, y);
	uchar g61 = PW(in, x+3, y);
	uchar g42 = PW(in, x-2, y+1);
	uchar r4 = PW(in, x-1, y+1);
	uchar g52 = PW(in, x, y+1);
	uchar r5 = PW(in, x+1, y+1);
	uchar g62 = PW(in, x+2, y+1);
	uchar r6 = PW(in, x+3, y+1);
	uchar g71 = PW(in, x-1, y+2);
	uchar b8 = PW(in, x, y+2);
	uchar g81 = PW(in, x+1, y+2);
	uchar b9 = PW(in, x+2, y+2);
	uchar g82 = PW(in, x, y+3);
	uchar r8 = PW(in, x+1, y+3);

	// top left pixel (b5, 'g' row, 'g' column)
	r = (int)(-3*b2/2 + 2*r1 + 2*r2 - 3*b4/2 + 6*b5 - 3*b6/2 + 2*r4 + 2*r5 - 3*b8/2)/8;
	g = (int)(-b2 + 2*g22 - b4 + 2*g41 + 4*b5 + 2*g51 -b6 + 2*g52 - b8)/8;
	b = (int)b5;

	out[0].w = clamp_i16_u8(r);
	out[0].x = clamp_i16_u8(g);
	out[0].y = clamp_i16_u8(b);

	// top right pixel (g51, b row, r column)
	r = (int)(-g21 - g22 + 4*r2 - g32 + g41/2 + 5*g51 + g61/2 - g52 + 4*r5 - g62 - g81)/8;
	g = (int)g51;
	b = (int)(g21/2 - g22 - g32 - g41 + 4*b5 + 5*g51 + 4*b6 - g61 - g52 - g62 + g81/2)/8;

	out[1].w = clamp_i16_u8(r);
	out[1].x = clamp_i16_u8(g);
	out[1].y = clamp_i16_u8(b);

	// bottom left pixel (g52, r row, b column)
	r = (int)(g22/2 - g41 - g51 - g42 + 4*r4 + 5*g52 + 4*r5 - g62 - g71 - g81 + g82/2)/8;
	g = (int)g52;
	b = (int)(-g22 - g41 + 4*b5 - g51 + g42/2 + 5*g52 + g62/2 - g71 + 4*b8 - g81 - g82)/8;

	out[2].w = clamp_i16_u8(r);
	out[2].x = clamp_i16_u8(g);
	out[2].y = clamp_i16_u8(b);

	// bottom right pixel (r5, g row, g column)
	r = (int)r5;
	g = (int)(-r2 + 2*g51 - r4 + 2*g52 + 4*r5 + 2*g62 - r6 + 2*g81 - r8)/8;
	b = (int)(-3*r2/2 + 2*b5 + 2*b6 - 3*r4/2 + 6*r5 - 3*r6/2 + 2*b8 + 2*b9 - 3*r8/2)/8;

	out[3].w = clamp_i16_u8(r);
	out[3].x = clamp_i16_u8(g);
	out[3].y = clamp_i16_u8(b);
}
